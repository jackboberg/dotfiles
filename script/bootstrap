#!/usr/bin/env bash

# script/bootstrap: Resolve all dependencies

set -euo pipefail
IFS=$'\n\t'

CONFIG_DIR=${XDG_CONFIG_HOME:-$HOME/.config}
CONFIG_FILE="${CONFIG_DIR}/dotfiles.cfg"

# messaging
bootstrap_colors () {
    if [[ -t 2 ]] && [[ -z "${NO_COLOR-}" ]] && [[ "${TERM-}" != "dumb" ]]; then
        NOFORMAT='\033[0m' RED='\033[0;31m' GREEN='\033[0;32m' ORANGE='\033[0;33m' BLUE='\033[0;34m' PURPLE='\033[0;35m' CYAN='\033[0;36m' YELLOW='\033[1;33m'
    else
        # shellcheck disable=SC2034  # Unused variables left for readability
        NOFORMAT='' RED='' GREEN='' ORANGE='' BLUE='' PURPLE='' CYAN='' YELLOW=''
    fi
}

msg () {
    echo >&2 -e "${1-}"
}

msg_header () {
    msg "${BLUE}${1-}${NOFORMAT}"
}

msg_info () {
    msg "${CYAN}${1-}${NOFORMAT}"
}

msg_warn () {
    msg "${ORANGE}${1-}${NOFORMAT}"
}

msg_error () {
    msg "${RED}${1-}${NOFORMAT}"
}

affirm () {
    if ! confirm "$@"; then exit 1; fi
}

confirm () {
    local prompt=$1
    local YN

    msg_warn "${prompt}"
    read -e -r -p "[Y/n]: " YN

    if [[ $YN == "y" || $YN == "Y" || $YN == "" ]]; then
        return 0
    else
        return 1
    fi
}

# utils

fn_exists () {
    declare -F "$1" > /dev/null
}

file_contains () {
    local file=$1
    local search=$2

    if grep -q "$search" "$file"; then
        return 0
    else
        return 1
    fi
}

# main

bootstrap () {
    cd "$(dirname "$0")/.."
    bootstrap_colors
    msg_header "==> script/bootstrap…"

    affirm "Have you authenticated with the App Store?"

    bootstrap_config
    bootstrap_xcode
    bootstrap_homebrew
}

bootstrap_config () {
    msg_info "==> Initializing config…"

    mkdir -p "$(dirname "${CONFIG_FILE}")"
    touch "${CONFIG_FILE}"

    configure secure_dir \
        "Where do you store secure files?" \
        "${HOME}/Library/Mobile Documents/com~apple~CloudDocs/dotfiles"
}

# config

configure () {
    local key=$1
    local prompt=$2
    local default=$3
    local current

    # check if already configured
    current=$(config_get "${key}" "__UNDEFINED__")
    if [ "${current}" != "__UNDEFINED__" ]; then return; fi

    msg_warn "${prompt}"
    read -e -r -p "[${default}]: "

    if [[ $REPLY == "" ]]; then
        config_set "${key}" "${default}"
    else
        config_set "${key}" "${REPLY}"
    fi
}

config_get() {
    local key=$1

    local value
    value=$(
        (grep -E "^${key}=" -m 1 "${CONFIG_FILE}" 2>/dev/null || echo "VAR=__UNDEFINED__") \
            | head -n 1 \
            | cut -d '=' -f 2-)

    if [ "${value}" = "__UNDEFINED__" ]; then
        # errors if no default provided
        value="${2}"
    fi
    printf -- "%s" "${value}"
}

config_set() {
    local key=$1
    local value=$2

    grep -q "^${key}" "${CONFIG_FILE}" && \
        sed -i "" "s/^${key}=.*/${key}=${value}/" "${CONFIG_FILE}" \
        || echo "${key}=${value}" >> "${CONFIG_FILE}"
}

bootstrap_xcode () {
    msg_info "==> Looking for Command Line Tools…"
    xcode-select --print-path >/dev/null 2>&1 || {
        msg_info "==> Installing Command Line Tools…"
        xcode-select --install
    }
}

bootstrap_homebrew () {
    if ! [ -x "$(command -v brew)" ]; then
        msg_info "==> Installing Homebrew…"
        /usr/bin/env bash -c \
            "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
    fi
    if [ -f "Brewfile" ] && [ "$(uname -s)" = "Darwin" ]; then
        msg_info "==> Checking Homebrew dependencies…"
        brew bundle check >/dev/null 2>&1  || {
            msg_info "==> Installing Homebrew dependencies…"
            brew bundle --no-upgrade
        }
    fi
}

if ! (return 0 2>/dev/null); then
    bootstrap "$@"
fi
