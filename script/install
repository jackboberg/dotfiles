#!/usr/bin/env bash

# script/install: Clone repository and execute setup

set -euo pipefail
IFS=$'\n\t'

REPO="https://github.com/jackboberg/dotfiles.git"
DOT_DIR="${HOME}/src/github.com/jackboberg/dotfiles"

install () {
    msg_header "==> script/install…"
    install_xcode
    get_dotfiles
    do_setup
}

setup_colors () {
    if [[ -t 2 ]] && [[ -z "${NO_COLOR-}" ]] && [[ "${TERM-}" != "dumb" ]]; then
        NOFORMAT='\033[0m' RED='\033[0;31m' GREEN='\033[0;32m' ORANGE='\033[0;33m' BLUE='\033[0;34m' PURPLE='\033[0;35m' CYAN='\033[0;36m' YELLOW='\033[1;33m'
    else
        # shellcheck disable=SC2034  # Unused variables left for readability
        NOFORMAT='' RED='' GREEN='' ORANGE='' BLUE='' PURPLE='' CYAN='' YELLOW=''
    fi
}

msg () {
    echo >&2 -e "${1-}"
}

msg_header () {
    msg "${BLUE}${1-}${NOFORMAT}"
}

msg_info () {
    msg "${CYAN}${1-}${NOFORMAT}"
}

msg_error () {
    msg "${RED}${1-}${NOFORMAT}"
}

affirm () {
    if ! confirm "$@"; then exit 1; fi
}

confirm () {
    local YN

    read -e -r -p "${ORANGE}$1${NOFORMAT} [Y/n] " YN

    if [[ $YN == "y" || $YN == "Y" || $YN == "" ]]; then
        return 0
    else
        return 1
    fi
}

fn_exists () {
    declare -F "$1" > /dev/null
}

file_contains () {
    local file=$1
    local search=$2

    if grep -q "$search" "$file"; then
        return 0
    else
        return 1
    fi
}

require_env () {
    local var=$1
    local prompt=$2
    local env_path=$3

    if [ -n "${!var+set}" ]; then
        return
    fi

    msg_warn "$prompt"
    read -e -r

    local setter
    setter="${var}=\"${REPLY}\""

    eval "${setter}"
    echo "$setter" >> "$env_path"
}

install_xcode () {
    msg_info "==> Looking for Command Line Tools…"
    xcode-select --print-path >/dev/null 2>&1 || {
        msg "==> Installing Command Line Tools…"
        xcode-select --install
    }
}

get_dotfiles () {
    msg_info "==> Getting dotfiles…"
    if [ -d "$DOT_DIR" ]; then
        msg "==> $DOT_DIR exists…"
        exit 1
    fi

    mkdir -p "$(dirname "${DOT_DIR}")"
    git clone "$REPO" "$DOT_DIR"
}

do_setup () {
    msg_info "==> Setting up dotfiles…"
    cd "$DOT_DIR"
    script/setup
}

if ! (return 0 2>/dev/null); then
    setup_colors
    install "$@"
fi
