extends html

snippet array "array" !
$${1:arrayName} = array(
    '${2}' => ${3}
);${4}
endsnippet

snippet class "class" !
/**
 * ${1}
 * @author ${5:`!v g:snips_author`}
 */
class ${2:ClassName}
{
    ${3}
    function ${4:__construct}(${5:argument})
    {
        ${6:// code...}
    }
}
endsnippet

snippet do "do" !
do
{
    ${2:// code... }
}
while (${1:/* condition */});"
endsnippet

snippet for "for" !
for ($${2:i} = 0; $$2 < ${1:count}; $$2${3:++})
{
    ${4:// code...}
}
endsnippet

snippet foreach "foreach" !
foreach ($${1:variable} as $${2:key}${3: => $${4:value}})
{
    ${5:// code...}
}
endsnippet

snippet if "if" !
if (${1:/* condition */})
{
    ${2:// code...}
}
endsnippet

snippet else "else" !
else
{
    ${1:// code...}
}
endsnippet

snippet elseif "else if" !
else if (${1:/* condition */})
{
    ${2:// code...}
}
endsnippet

snippet ifelse "if else" !
if (${1:/* condition */})
{
    ${2:// code...}
}
else
{
    ${3:// code...}
}
endsnippet

snippet printr "printr"
echo '<pre>'
    . print_r(${1:variable}, TRUE)
    ;
exit;
endsnippet

snippet php
<?php ${1}
endsnippet

snippet ec
    echo "${1:string}"${2};
endsnippet

snippet inc
    include '${1:file}';${2}
endsnippet

snippet inc1
    include_once '${1:file}';${2}
endsnippet

snippet req
    require '${1:file}';${2}
endsnippet

snippet req1
    require_once '${1:file}';${2}
endsnippet

# $GLOBALS['...']
snippet globals
    $GLOBALS['${1:variable}']${2: = }${3:something}${4:;}${5}
endsnippet

snippet $_ "COOKIE['...']""
   $_COOKIE['${1:variable}']${2}
endsnippet
snippet $_ "ENV['...']"
   $_ENV['${1:variable}']${2}
endsnippet
snippet $_ "FILES['...']"
   $_FILES['${1:variable}']${2}
endsnippet
snippet $_ "Get['...'"]
   $_GET['${1:variable}']${2}
endsnippet
snippet $_ "POST['...']"
   $_POST['${1:variable}']${2}
endsnippet
snippet $_ "REQUEST['...']"
   $_REQUEST['${1:variable}']${2}
endsnippet
snippet $_ "SERVER['...']"
   $_SERVER['${1:variable}']${2}
endsnippet
snippet $_ "SESSION['...']"
   $_SESSION['${1:variable}']${2}
endsnippet

# Start Docblock
snippet /*
/**
 * ${1}
 **/
endsnippet

snippet doc_c "class doc"
    /**
     * ${3:undocumented class}
     *
     * @packaged ${4:default}
     * @author ${5:`g:snips_author`}
     **/
    ${1:}class ${2:}
    {${6}
    } // END $1class $2
endsnippet
snippet doc_cp "class doc (post)"
    /**
     * ${1:undocumented class}
     *
     * @package ${2:default}
     * @author ${3:`g:snips_author`}
    **/${4}
endsnippet

snippet doc_v "var doc"
/**
 * ${3:undocumented class variable}
 *
 * @var ${4:string}
 **/
${1:var} $${2};${5}
endsnippet
snippet doc_vp "var doc (post)"
    /**
     * ${1:undocumented class variable}
     *
     * @var ${2:string}
     **/${3}
endsnippet

snippet doc_d "constant doc"
    /**
     * ${3:undocumented constant}
     **/
    define(${1}, ${2});${4}
endsnippet
snippet doc_dp "constant doc (post)"
    /**
     * ${1:undocumented constant}
     **/${2}
endsnippet

snippet fun "function doc" !
/**
 * $2
 *
 * @access  $1
 * @param   $3
 * @return  ${4:void}
 **/
${1:public }function ${2:someFunc}(${3})
{
    ${6}
}
endsnippet
snippet doc_f "function doc" !
/**
 * $2
 *
 * @access  $1
 * @param   $3
 * @return  ${4:void}
 **/
${1:public }function ${2:someFunc}(${3})
{
    ${6}
}
endsnippet
snippet doc_fp "function doc (post)"
    /**
     * ${1:undocumented function}
     *
     * @return ${2:void}
     * @author ${3:`g:snips_author`}
     **/${4}
endsnippet

# Header
snippet doc_h
    /**
     * ${1}
     *
     * @author  ${2:`g:snips_author`}
     * @version ${3:$Id$}
     * @copyright ${4:$2}, `strftime('%d %B, %Y')`
     * @package ${5:default}
     **/

    /**
     * Define DocBlock
     *//
endsnippet
# Interface
snippet doc_i
    /**
     * ${2:undocumented class}
     *
     * @package ${3:default}
     * @author ${4:`g:snips_author`}
     **/
    interface ${1:}
    {${5}
    } // END interface $1
endsnippet
# :vim:ft=snippets:
